<?xml version="1.0" encoding="UTF-8"?><!--  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
    
   
    <!-- Bean definitions go here-full class path and package name! -->
    <!-- these are the classes we want to hook into our app: the interface we wrote to and the consoleIO-->
    <bean id="dvdLibraryDao" class="com.swcguild.dvdlibraryv3.DvdLibraryDaoDKImpl"/> 
    <bean id="consoleIO" class="com.swcguild.dvdlibraryv3.ConsoleIO" />
    
    <!--For future implementations, will need to comment out above, and use this bean:
    <bean id ="dvdLibraryDao" class="com.swcguild.dvdlibraryv3.myClassFriendsImpl"> </bean>-->
    
    <!--our controller bean definition needs to include the constructor ars so the classes above will get injected into the controller-->
    <bean id="controller" class="com.swcguild.dvdlibraryv3.DvdLibraryController"> 
         <!--in order for the controller to inject the dao into itself, the bean is passed as a constructor arg -->
        <constructor-arg ref="dvdLibraryDao"/> 
        <constructor-arg ref="consoleIO" /> 
        
       
    </bean>
  
                                
</beans>
    <!-- what we have done is given our class a context -->
    <!--no paramters we are passing to the event   -->
    <!-- event instantiations  these all do something different when we call compete-->
    <!-- we do all the joining through the configuration  -->
    <!-- we do config first, then make sure it matches in app where we instantiate the bean -->
    <!--  this is a way for this to get passed...becuase the constructor takes an argument ...so we have to pass it one-->




<!--
    <bean id="canadianSpeedSkater" class="com.swcguild.olympian.Olympian">
        <constructor-arg ref="speedSkating"/>
    // passing "speedSkating" to Olympian as the event constructor, which it requires 
        <property name="country" value="Canada"></property>
    //we are assigning props to the Olympan, changing the default 
    </bean>    
-->
<!--we want one of these in our test file and one in another context  -->
<!--  -->